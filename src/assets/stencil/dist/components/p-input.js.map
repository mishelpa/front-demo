{"file":"p-input.js","mappings":"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","names":["PInput"],"sources":["src/components/atoms/p-input/p-input.scss?tag=p-input&encapsulation=shadow","src/components/atoms/p-input/p-input.tsx"],"sourcesContent":["\n\n:host {\n    * {\n        box-sizing: border-box;\n        font-family: 'Prelo';\n        font-size: 14px;\n    }\n    .PInput {\n      position: relative;\n      .input {\n        // overflow: visible;\n        // display: block;\n        width: 100%;\n        padding: 10px 14px;\n        height: 48px;\n        color: #6F7D9D;\n        border: 1px solid #929292;\n        border-radius: 4px;\n        outline:none;\n        &:disabled, input:disabled:hover {\n          background-color: #EAE9EF;\n          border: 1px solid #EAE9EF;\n          font-weight: 500;\n          color: #919CB1;\n          cursor: auto;\n        }\n        &::placeholder { /* Chrome, Firefox, Opera, Safari 10.1+ */\n          color: #6F7D9D;\n          font-size: 14px;\n          font-weight: 400;\n        }\n      }\n\n      .icon {\n        position: absolute;\n        right: 16px;\n        top: 12px;\n      }\n\n      .lock {\n        background-color: #EDEFF2;\n        border: none;\n        color: #212942;\n        pointer-events: none;\n      }\n    }\n\n    .error-text:not(:disabled) {\n        &.error {\n          border: 1px solid #ff3e38;\n        }\n    }\n    .lowercase {\n        text-transform: none !important;\n    }\n    .input:-ms-input-placeholder, .input::-ms-input-placeholder {\n      color: #212942;\n      vertical-align: middle;\n    }\n\n    .input::-ms-input-placeholder {\n        color: #212942;\n    }\n}\n","import { Component, Prop, EventEmitter, Event, State, Element, Listen, h } from '@stencil/core';\nimport { Modelable } from '../../../globals/interfaces/modelable.interface';\nimport { Type, Size, TypeErrors, Color } from '../../../globals/types/types';\n\n@Component({\n  tag: 'p-input',\n  styleUrl: 'p-input.scss',\n  shadow: true\n})\nexport class PInput implements Modelable {\n\n  @Element() el: HTMLElement;\n  @Prop() placeholder: string = '';\n  @Prop() type: Type = 'text';\n  @Prop() size: Size = 'md';\n  @Prop() name: string = 'text';\n  @Prop({mutable: true}) value: string;\n  @Prop({mutable: true}) disable: boolean = false;\n  @Prop({mutable: true}) lock: boolean = false;\n  @Prop({mutable: true}) error: boolean = false;\n  @Prop({mutable: true}) colorerror: TypeErrors = 'error';\n  @Prop({mutable: true}) maxlength: string;\n  @Prop({mutable: true}) minlength: string;\n  @Prop({mutable: true}) lowercase: boolean = false;\n  @Prop({mutable: true}) focusable: boolean = false;\n  @Prop({mutable: true}) iseventemmiter: boolean = true;\n  @Prop() iconname: string = '';\n  @Prop() iconcolor: Color = 'none';\n  @Prop() iconbgcolor: Color = 'none';\n  @Prop() iconviewbox: string = '';\n\n  @Event() inputChange: EventEmitter;\n  @Event() changeValue: EventEmitter;\n  @Event() elementBlur: EventEmitter;\n  @Event() elementKeydown: EventEmitter;\n  @Event() elementFocus: EventEmitter;\n  @Event() elementKeyEnter: EventEmitter;\n\n  @State() touched: boolean = false;\n  @State() position: number;\n\n\n  elementHasBlur(ev: FocusEvent) {\n\n    this.position = undefined;\n\n    if (this.value && this.value.length > 0) {\n\n      this.value = this.value;\n    }\n\n    this.elementBlur.emit(ev);\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  }\n\n  componentDidUpdate() {\n\n    if(this.position !== undefined) {\n\n      this.el.shadowRoot.querySelector('input').setSelectionRange(this.position, this.position);\n    }\n\n    if(this.value && this.value.length > 0) {\n\n      this.value = this.value.replace(/^\\s+/,\"\");\n      this.changeValue.emit(this.value);\n    }\n  }\n\n  componentDidLoad() {\n\n    if (this.focusable) {\n\n      setTimeout( () => {\n\n        this.el.shadowRoot.querySelector('input').focus();\n      }, 0);\n    }\n  }\n\n  render() {\n      return (\n        <div class={this.getMainClassList()}>\n                  {\n          this.iconname &&\n          <p-svg class=\"icon\" name={this.iconname} viewbox={this.iconviewbox} width=\"24\"\n            height=\"24\"\n            color={this.disable ? 'lightgray' : 'white'}>\n          </p-svg>\n        }\n          <input\n            maxlength={this.maxlength}\n            minlength={this.minlength}\n            type={this.type }\n            name={this.name}\n            id={this.name}\n            placeholder={this.placeholder}\n            onChange={ev => this.change(ev)}\n            class={this.getInputClassList()}\n            value={this.value}\n            onBlur={ ev => this.elementHasBlur(ev) }\n            onFocus={(ev) => this.elementFocus.emit(ev)}\n            onKeyDown={(ev) => this.elementKeydown.emit(ev)}\n            disabled={this.disable}\n            readonly={this.lock}\n            >\n          </input>\n        </div>\n      );\n  }\n\n  getMainClassList() {\n    return {\n      ['PInput']: true,\n      [`disable`]: this.disable\n    }\n  }\n\n  getInputClassList() {\n    return {\n      [`input`]: true,\n      [`error-text ${this.colorerror}`]: this.error,\n      [`lowercase`]: this.lowercase,\n      [`lock`]: this.lock,\n      [`${this.size}`]: true\n    }\n  }\n\n  @Listen('keydown')\n  handleKeyDown(ev: KeyboardEvent) {\n    if (ev.keyCode == 90 && ev.ctrlKey) {\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n\n    if (ev.key == \"Enter\") {\n      this.elementKeyEnter.emit(this.value);\n    }\n  }\n\n  change(_event) {\n    this.inputChange.emit(this.value);\n  }\n\n}\n"],"version":3}