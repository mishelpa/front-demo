/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { ButtonType, Color, FontType, FontWeight, Measures, Size, ThemeColor, Type, TypeErrors } from "./globals/types/types";
import { IconName } from "./components/particles/p-svg/iicon";
export { ButtonType, Color, FontType, FontWeight, Measures, Size, ThemeColor, Type, TypeErrors } from "./globals/types/types";
export { IconName } from "./components/particles/p-svg/iicon";
export namespace Components {
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface PButton {
        "color": ThemeColor;
        "disable": boolean;
        "iconbgcolor": Color;
        "iconcolor": Color;
        "iconname": string;
        "iconviewbox": string;
        "size": Size;
        "text": string;
        "type": ButtonType;
    }
    interface PFont {
        "blocked": boolean;
        "color": Color;
        "ellipsis": boolean;
        "text": string;
        "type": FontType;
        "weight": FontWeight;
    }
    interface PInput {
        "colorerror": TypeErrors;
        "disable": boolean;
        "error": boolean;
        "focusable": boolean;
        "iconbgcolor": Color;
        "iconcolor": Color;
        "iconname": string;
        "iconviewbox": string;
        "iseventemmiter": boolean;
        "lock": boolean;
        "lowercase": boolean;
        "maxlength": string;
        "minlength": string;
        "name": string;
        "placeholder": string;
        "size": Size;
        "type": Type;
        "value": string;
    }
    interface PModal {
        "header": string;
        "isopen": boolean;
    }
    interface PPaginator {
        "itemCount": number;
        "page": number;
        "pageSize": number;
    }
    interface PSvg {
        "color": Color;
        "fill": string;
        "height": string;
        "measure": Measures;
        "name": IconName | string;
        "pointer": boolean;
        "preserveAspectRatio": string;
        "viewbox": string;
        "width": string;
    }
    interface PTable {
        "action": boolean;
        "headers": any[];
        "itemCount": number;
        "items": any[];
        "pagination": boolean;
    }
}
export interface PButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPButtonElement;
}
export interface PInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPInputElement;
}
export interface PPaginatorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPPaginatorElement;
}
declare global {
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLPButtonElement extends Components.PButton, HTMLStencilElement {
    }
    var HTMLPButtonElement: {
        prototype: HTMLPButtonElement;
        new (): HTMLPButtonElement;
    };
    interface HTMLPFontElement extends Components.PFont, HTMLStencilElement {
    }
    var HTMLPFontElement: {
        prototype: HTMLPFontElement;
        new (): HTMLPFontElement;
    };
    interface HTMLPInputElement extends Components.PInput, HTMLStencilElement {
    }
    var HTMLPInputElement: {
        prototype: HTMLPInputElement;
        new (): HTMLPInputElement;
    };
    interface HTMLPModalElement extends Components.PModal, HTMLStencilElement {
    }
    var HTMLPModalElement: {
        prototype: HTMLPModalElement;
        new (): HTMLPModalElement;
    };
    interface HTMLPPaginatorElement extends Components.PPaginator, HTMLStencilElement {
    }
    var HTMLPPaginatorElement: {
        prototype: HTMLPPaginatorElement;
        new (): HTMLPPaginatorElement;
    };
    interface HTMLPSvgElement extends Components.PSvg, HTMLStencilElement {
    }
    var HTMLPSvgElement: {
        prototype: HTMLPSvgElement;
        new (): HTMLPSvgElement;
    };
    interface HTMLPTableElement extends Components.PTable, HTMLStencilElement {
    }
    var HTMLPTableElement: {
        prototype: HTMLPTableElement;
        new (): HTMLPTableElement;
    };
    interface HTMLElementTagNameMap {
        "my-component": HTMLMyComponentElement;
        "p-button": HTMLPButtonElement;
        "p-font": HTMLPFontElement;
        "p-input": HTMLPInputElement;
        "p-modal": HTMLPModalElement;
        "p-paginator": HTMLPPaginatorElement;
        "p-svg": HTMLPSvgElement;
        "p-table": HTMLPTableElement;
    }
}
declare namespace LocalJSX {
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface PButton {
        "color"?: ThemeColor;
        "disable"?: boolean;
        "iconbgcolor"?: Color;
        "iconcolor"?: Color;
        "iconname"?: string;
        "iconviewbox"?: string;
        "onButtonClicked"?: (event: PButtonCustomEvent<any>) => void;
        "size"?: Size;
        "text"?: string;
        "type"?: ButtonType;
    }
    interface PFont {
        "blocked"?: boolean;
        "color"?: Color;
        "ellipsis"?: boolean;
        "text"?: string;
        "type"?: FontType;
        "weight"?: FontWeight;
    }
    interface PInput {
        "colorerror"?: TypeErrors;
        "disable"?: boolean;
        "error"?: boolean;
        "focusable"?: boolean;
        "iconbgcolor"?: Color;
        "iconcolor"?: Color;
        "iconname"?: string;
        "iconviewbox"?: string;
        "iseventemmiter"?: boolean;
        "lock"?: boolean;
        "lowercase"?: boolean;
        "maxlength"?: string;
        "minlength"?: string;
        "name"?: string;
        "onChangeValue"?: (event: PInputCustomEvent<any>) => void;
        "onElementBlur"?: (event: PInputCustomEvent<any>) => void;
        "onElementFocus"?: (event: PInputCustomEvent<any>) => void;
        "onElementKeyEnter"?: (event: PInputCustomEvent<any>) => void;
        "onElementKeydown"?: (event: PInputCustomEvent<any>) => void;
        "onInputChange"?: (event: PInputCustomEvent<any>) => void;
        "placeholder"?: string;
        "size"?: Size;
        "type"?: Type;
        "value"?: string;
    }
    interface PModal {
        "header"?: string;
        "isopen"?: boolean;
    }
    interface PPaginator {
        "itemCount"?: number;
        "onPageChanged"?: (event: PPaginatorCustomEvent<any>) => void;
        "onSizeChanged"?: (event: PPaginatorCustomEvent<any>) => void;
        "page"?: number;
        "pageSize"?: number;
    }
    interface PSvg {
        "color"?: Color;
        "fill"?: string;
        "height"?: string;
        "measure"?: Measures;
        "name"?: IconName | string;
        "pointer"?: boolean;
        "preserveAspectRatio"?: string;
        "viewbox"?: string;
        "width"?: string;
    }
    interface PTable {
        "action"?: boolean;
        "headers"?: any[];
        "itemCount"?: number;
        "items"?: any[];
        "pagination"?: boolean;
    }
    interface IntrinsicElements {
        "my-component": MyComponent;
        "p-button": PButton;
        "p-font": PFont;
        "p-input": PInput;
        "p-modal": PModal;
        "p-paginator": PPaginator;
        "p-svg": PSvg;
        "p-table": PTable;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "p-button": LocalJSX.PButton & JSXBase.HTMLAttributes<HTMLPButtonElement>;
            "p-font": LocalJSX.PFont & JSXBase.HTMLAttributes<HTMLPFontElement>;
            "p-input": LocalJSX.PInput & JSXBase.HTMLAttributes<HTMLPInputElement>;
            "p-modal": LocalJSX.PModal & JSXBase.HTMLAttributes<HTMLPModalElement>;
            "p-paginator": LocalJSX.PPaginator & JSXBase.HTMLAttributes<HTMLPPaginatorElement>;
            "p-svg": LocalJSX.PSvg & JSXBase.HTMLAttributes<HTMLPSvgElement>;
            "p-table": LocalJSX.PTable & JSXBase.HTMLAttributes<HTMLPTableElement>;
        }
    }
}
